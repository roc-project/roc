import os.path

Import('env', 'subenvs')

if [s for s in COMMAND_LINE_TARGETS if s == 'test' or s.startswith('test/')]:
    if not GetOption('enable_tests'):
        env.Die("can't use 'test*' target(s) without `--enable-tests' option")

if [s for s in COMMAND_LINE_TARGETS if s == 'bench' or s.startswith('bench/')]:
    if not GetOption('enable_benchmarks'):
        env.Die("can't use 'bench*' target(s) without `--enable-benchmarks' option")

env.Append(CPPPATH=['#src/modules'])

for targetdir in env.GlobRecursive('modules', 'target_*'):
    if targetdir.name in env['ROC_TARGETS']:
        env.Append(CPPPATH=['#src/%s' % targetdir])

for t in env['ROC_TARGETS']:
    env.Append(CPPDEFINES=['ROC_' + t.upper()])

for module in env['ROC_MODULES']:
    moduledir = 'modules/' + module

    cenv = env.Clone()
    cenv.MergeVars(subenvs.tools)
    cenv.Append(CPPDEFINES=('ROC_MODULE', module))

    genv = subenvs.generated_code.Clone()
    genv.MergeVars(cenv)

    sources = []
    objects = []

    sources += env.GlobFiles('%s/*.cpp' % moduledir)
    for rs in env.GlobFiles('%s/*.rl' % moduledir):
        objects += genv.Ragel(rs)

    for targetdir in env.GlobRecursive(moduledir, 'target_*'):
        if targetdir.name in env['ROC_TARGETS']:
            sources += env.GlobRecursive(targetdir, '*.cpp')
            for rs in env.GlobRecursive(targetdir, '*.rl'):
                objects += genv.Ragel(rs)

    if not sources and not objects:
        continue

    lib = cenv.StaticLibrary(module, sources+objects)
    env.Alias(module, [lib], env.Action(''))
    env.AlwaysBuild(module)

    env.Prepend(LIBS=[lib])

libroc = None

if not GetOption('disable_lib'):
    cenv = env.Clone()
    cenv.MergeVars(subenvs.library)
    cenv.Append(CPPDEFINES=('ROC_MODULE', 'roc_api'))
    cenv.Append(CPPPATH=['library/include'])

    sources = env.GlobFiles('library/src/*.cpp')

    libroc = cenv.SharedLibrary(
        'roc_unstripped', sources, SHLIBSUFFIX=subenvs.library['SHLIBSUFFIX'])

    env.Depends(libroc, '#src/library/roc.version')

    libroc = cenv.MaybeStripLibrary(libroc[0].name.replace('_unstripped', ''),
        libroc, is_debug=GetOption('enable_debug'))

    target = env.Install(env['ROC_BINDIR'], libroc)
    symlinks = env.SymlinkLibrary(target[0])

    env.Alias('libroc', [target] + symlinks, env.Action(''))
    env.AlwaysBuild('libroc')

    env.AddDistFile(env['ROC_SYSTEM_INCDIR'], '#src/library/include/roc')
    env.AddDistFile(env['ROC_SYSTEM_LIBDIR'], target)

    env.AddDistAction(env.FixupLibrary(
        os.path.join(env['ROC_SYSTEM_LIBDIR'], target[0].name)))

    for s in symlinks:
        env.AddDistFile(env['ROC_SYSTEM_LIBDIR'], s)

    if 'PKG_CONFIG_PATH' in env.Dictionary():
        pc_file = env.GeneratePkgConfig(
            build_dir='.',
            filename='roc.pc',
            prefix=GetOption('prefix'),
            libdir=env['ROC_SYSTEM_LIBDIR'],
            name='roc',
            desc='Real-time audio streaming over the network.',
            url='https://roc-streaming.org',
            version=env['ROC_VERSION'])
        env.AddDistFile(env['PKG_CONFIG_PATH'], pc_file)

if GetOption('enable_examples'):
    cenv = env.Clone()
    cenv.MergeVars(subenvs.examples)
    cenv.MergeVars(subenvs.tools)
    cenv.MergeVars(subenvs.tests)
    cenv.Append(CPPPATH=['library/include'])
    cenv.Append(LIBS=[libroc])

    targets = []

    for source in env.GlobFiles('library/example/*.c'):
        example = os.path.splitext(source.name)[0]
        exename = 'roc-example-' + example.replace('_', '-')

        if 'pulseaudio' in example and not 'pulseaudio' in env['ROC_TARGETS']:
            continue

        exe = cenv.Program(exename, [source],
                    RPATH=(cenv['RPATH'] if 'RPATH' in cenv.Dictionary() else None))

        env.Depends(exe, libroc)
        targets.append(env.Install(env['ROC_BINDIR'], exe))

    env.Alias('examples', targets, env.Action(''))
    env.AlwaysBuild('examples')

if GetOption('enable_tests') or GetOption('enable_benchmarks'):
    cenv = env.Clone()
    cenv.MergeVars(subenvs.tools)
    cenv.MergeVars(subenvs.tests)
    cenv.Append(CPPDEFINES=('ROC_MODULE', 'roc_test'))

    sanitizer_opt_obj = []
    if GetOption('sanitizers'):
        sanitizer_opt_obj = cenv.Object('sanitizer_options.cpp')

    if GetOption('enable_tests'):
        test_main = cenv.Object('tests/test_main.cpp')

    if GetOption('enable_benchmarks'):
        bench_main = cenv.Object('tests/bench_main.cpp')

    for testname in env['ROC_MODULES'] + ['roc_library']:
        testdir = 'tests/' + testname

        ccenv = cenv.Clone()
        ccenv.Append(CPPPATH=['#src/%s' % testdir])

        if testname == 'roc_library':
            if GetOption('disable_lib'):
                continue

            ccenv.Append(CPPPATH=['library/include'])
            ccenv.Prepend(LIBS=[libroc])

        for kind in ['test', 'bench']:
            if kind == 'test':
                if GetOption('enable_tests'):
                    main = test_main
                else:
                    continue
            else:
                if GetOption('enable_benchmarks'):
                    main = bench_main
                else:
                    continue

            sources = env.GlobFiles('%s/%s_*.cpp' % (testdir, kind))

            for targetdir in env.GlobRecursive(testdir, 'target_*'):
                if targetdir.name in env['ROC_TARGETS']:
                    ccenv.Append(CPPPATH=['#src/%s' % targetdir])
                    sources += env.GlobRecursive(targetdir, '%s_*.cpp' % kind)

            if not sources:
                continue

            sources += env.GlobFiles('%s/test_helpers/*.cpp' % testdir)

            exename = 'roc-' + kind + '-' + testname.replace('roc_', '')
            target = env.Install(env['ROC_BINDIR'],
                ccenv.Program(exename, sources + main + sanitizer_opt_obj,
                    RPATH=(ccenv['RPATH'] if 'RPATH' in ccenv.Dictionary() else None)))

            exefile = '%s/%s' % (env['ROC_BINDIR'], exename)

            if kind == 'test':
                env.AddTest(testname, exefile)
            else:
                env.AddBench(testname, exefile)

if not GetOption('disable_tools'):
    sanitizer_opt_obj = []
    if GetOption('sanitizers'):
        sanitizer_opt_obj = cenv.Object('sanitizer_options.cpp')
    for tooldir in env.GlobDirs('tools/*'):
        cenv = env.Clone()
        cenv.MergeVars(subenvs.tools)
        cenv.Append(CPPDEFINES=('ROC_MODULE', tooldir.name))
        cenv.Append(CPPPATH=['tools', '#src/tools/%s' % tooldir.name])

        genv = subenvs.generated_code.Clone()
        genv.MergeVars(cenv)

        sources = env.GlobFiles('%s/*.cpp' % tooldir)
        objects = []
        for ggo in env.GlobFiles('%s/*.ggo' % tooldir):
            if env['ROC_COMMIT']:
                verstr = '%s (%s)' % (env['ROC_VERSION'], env['ROC_COMMIT'])
            else:
                verstr = env['ROC_VERSION']
            objects += genv.GenGetOpt(ggo, verstr)

        exename = tooldir.name.replace('roc_', 'roc-')
        target = env.Install(env['ROC_BINDIR'],
                    cenv.Program(exename, sources+objects+sanitizer_opt_obj))

        env.Alias(exename, [target], env.Action(''))
        env.AlwaysBuild(exename)

        env.AddDistFile(env['ROC_SYSTEM_BINDIR'], target)

if GetOption('enable_pulseaudio_modules'):
    cenv = env.Clone()
    cenv.MergeVars(subenvs.pulse)
    cenv.Append(CPPPATH=['library/include'])
    cenv.Append(LIBS=[libroc])

    helpers = cenv.Object('pulse/module_helpers.c')
    targets = []

    for source in env.GlobFiles('pulse/module-*.c'):
        module = os.path.splitext(source.name)[0]

        modulelib = cenv.SharedLibrary(module, [source, helpers], LIBPREFIX='')
        env.Depends(modulelib, libroc)

        target = env.Install(env['ROC_BINDIR'], modulelib)
        targets.append(target)

        env.AddDistFile(env['ROC_PULSE_MODULEDIR'], target)

    env.Alias('pulse', targets, env.Action(''))
    env.AlwaysBuild('pulse')
